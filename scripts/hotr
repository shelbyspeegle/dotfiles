#!/usr/bin/env bash

# HotR - Rerun a command on filesystem changes
#
# Usage:
#   hotr <command>
#   hotr --clear <command> # Clear screen before each execution of command

# Events that occur within this time from an initial one are ignored
cooldown_s='0.250'
clear=''
verbose=''
poll_interval='1'  # Check for changes every second

while [ $# -gt 0 ]; do
  case "$1" in
    -c|--clear) clear='1';;
    *) break;;
  esac
  shift
done

function execute() {
  [ -n "$clear" ] && clear
  "$@"
}

execute "$@"
last_run=$(date +%s)

# Find all files in the directory and get their modification times
get_file_signatures() {
  find . -type f \
    ! -path "*/\.git/*" \
    ! -name ".*\.swp" \
    ! -path "*/__pycache__/*" \
    ! -path "*/.cache/*" \
    ! -path "*/.pytest_cache/*" \
    -print0 | xargs -0 stat -f "%N %m" 2>/dev/null
}

# Get initial state
previous_signatures=$(get_file_signatures)

while true; do
  sleep $poll_interval

  current_signatures=$(get_file_signatures)

  # Check if anything changed
  if [[ "$current_signatures" != "$previous_signatures" ]]; then
    # Find which files changed for verbose mode
    if [ -n "$verbose" ]; then
      diff <(echo "$previous_signatures") <(echo "$current_signatures") | grep ">" | cut -d' ' -f2- | while read -r changed; do
        echo "$changed"
      done
    fi

    # Update signatures
    previous_signatures="$current_signatures"

    # Get current time
    now=$(date +%s)
    last_run_plus_cooldown=$(echo "$last_run + $cooldown_s" | bc)

    # Check if we're past the cooldown period
    if (( $(echo "$now > $last_run_plus_cooldown" | bc) )); then
      last_run=$now
      ( sleep "$cooldown_s" && execute "$@" ) &
    fi
  fi
done