#!/usr/bin/env bash

REPO="${HOME}/source/dotfiles"

# shellcheck disable=SC1091
source "${REPO}/scripts/.with-logging"

# Inputs
########################################################################################################################

# Check for updates from repo

echo_step "[ss] Checking for updates..."
if [[ ! -d "${REPO}" ]]; then
  echo_error "[ss] Repository not found (${REPO}). Exiting..."
  exit 1;
fi
cd "${REPO}" || exit 1
git fetch origin main >> /dev/null 2>&1
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})
if [ $LOCAL = $REMOTE ]; then
  echo_success "[ss] Repository is up to date."
elif [ $LOCAL = $BASE ]; then
  echo_step "[ss] Updates found. Pulling changes..."
  git pull
  echo_success "[ss] Repository updated."
elif [ $REMOTE = $BASE ]; then
  git push origin main >> /dev/null 2>&1
  echo_success "[ss] Changes pushed."
else
  echo_error "[ss] Local and remote repositories have diverged. Please resolve manually."
fi
echo

# Check for uncommitted changes
if ! git diff --quiet || ! git diff --cached --quiet || [[ -n $(git ls-files --others --exclude-standard) ]]; then
  echo_step "[ss] Local changes detected. Hit enter to sync."
  read -p "â†’ " answer
  if [[ -z $answer ]]; then
    git add .
    git commit -m "ss update" >> /dev/null 2>&1
    git push origin main >> /dev/null 2>&1
    echo_success "[ss] Changes synced"
  else
    echo_warn "[ss] Changes not committed."
  fi
fi


